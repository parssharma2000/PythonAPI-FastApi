from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from random import randrange

app = FastAPI()

class Post(BaseModel):
    title: str
    content: str 


mylist =[{"title":"first post","content":"this is my first post","id":1},{"title":"second post","content":"this is my second post","id":2}]   


def find_post(id):
    for p in mylist:
        if int(p["id"]) == int(id):
            return p

       

@app.get("/")
async def root():
    return {"message": mylist}


@app.get("/posts/{id}")
async def get_post(id:int):
    mypost = find_post(id)
    if mypost is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"no post found for {id}")
    return {"message": mypost}


''' 
# here we are getting the body as is(without binding it to pydantic library).
# comlexity is we need to read json and then extract each filed and there is no check which are readily available
@app.post('/createposts')
def create_post(payLoad = Body(...)):
    print(payLoad["name"])
    return {"message":"successfuly created post"}
'''    
#here we are using the pydantic library, interesting thins is to use the class name post:POST in pydentaica Base model call
@app.post('/createposts', status_code=status.HTTP_201_CREATED)
def create_post(post: Post):
    print(post)
    id_random = randrange(1,10000000)
    post_dict = post.dict()
    post_dict["id"] = id_random
    mylist.append(post_dict)
    return {"message":"successfuly created post"}

def find_index_post(id):
    for i, p in enumerate(mylist):
        if p["id"] == id:
            return i


@app.delete("/posts/{id}")
async def delete_post(id:int):
    index = find_index_post(id)
    if index is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"no post found for {id}")
    mylist.pop(index)
    return {"message": f"Post with id {id} is deleted"}


@app.put("/posts/{id}")
async def put_post(id:int, post:Post):
    index = find_index_post(id)
    if index is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"no post found for {id}")
    post_dict = post.dict()
    post_dict["id"] = id
    mylist[index] = post_dict
    return {"message":"post updated"}
